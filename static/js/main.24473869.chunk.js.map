{"version":3,"sources":["panels/Api/location.js","panels/main.js","App.js","reportWebVitals.js","index.js"],"names":["getIp","a","publicIp","v4","getLocation_by_ip","ip","fetch","response","json","resp","parseFloat","Apiloc","ApiSetLocation","geoFindMe","hook","b","navigator","geolocation","r","getCurrentPosition","position","lat","coords","latitude","lng","longitude","console","log","alert","viewPoint","dg_map","zoom","setView","setZoom","Home","useState","Container","size","setPopout","setLocation","setMap","useEffect","map","DG","get_location","className","id","onClick","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAEeA,I,2EAAf,sBAAAC,EAAA,+EACWC,IAASC,MADpB,4C,+BAIeC,E,8EAAf,WAAiCC,GAAjC,iBAAAJ,EAAA,4DACgB,0BACE,+CAFlB,SAGyBK,MAFT,0BAEqBD,EADnB,gDAFlB,cAGQE,EAHR,gBAIqBA,EAASC,OAJ9B,cAIQC,EAJR,yBAKW,CACH,IAAOC,WAAWD,EAAI,UACtB,IAAOC,WAAWD,EAAI,aAP9B,4C,kEAWA,4BAAAR,EAAA,sEACqBD,IADrB,cACUK,EADV,gBAEiBD,EAAkBC,GAFnC,oF,sBAgDA,IAOeM,EAPA,CACXX,QACAI,oBACAQ,e,2CACAC,UA/CJ,SAAmBC,GACf,IAAIb,EAAI,KACJc,EAAI,KAgBR,GAAIC,UAAUC,YAEP,CACH,IAAIC,EAAIF,UAAUC,YAAYE,oBAjBlC,SAAiBC,GACb,IAAMC,EAAOD,EAASE,OAAOC,SACvBC,EAAMJ,EAASE,OAAOG,UAC5BxB,EAAIoB,EACJN,EAAIS,EACJE,QAAQC,IAAI,UAAWN,EAAKG,GAC5BV,EAAKb,EAAGc,MAGZ,WAEI,OADAa,MAAM,SACC,CAAC,KAAM,SAOdF,QAAQC,IAAI,KAAMT,QAHlBU,MAAM,8EAMV,OADAF,QAAQC,IAAI,CAAC1B,EAAGc,IACT,CAACd,EAAGc,IAuBXc,UArBJ,SAAmBC,GAAuC,IAA/BT,EAA8B,uDAA1B,KAAMG,EAAoB,uDAAhB,KAAMO,EAAU,uDAAL,KACnC,OAARV,GAA0B,OAARG,GAGnBM,EAAOE,QACH,CAACX,EAAKG,IAGD,OAATO,GAEAD,EAAOG,QACHF,KCXGG,MAvCf,WAAiB,IAAD,EACgBC,mBAAS,cAACC,EAAA,EAAD,CAAWC,KAAK,WADzC,mBACGC,GADH,aAEoBH,mBAAS,MAF7B,mBAEKI,GAFL,aAGaJ,mBAAS,MAHtB,mBAGLL,EAHK,KAGGU,EAHH,KA+BZ,OAhBAC,qBAAU,WAAM,4CAEZ,iBAAAxC,EAAA,WAAAA,EAAA,sEACoBU,EAAOC,iBAD3B,OACUX,EADV,OAEIqC,EAAU,MACVC,EAAY,CAACtC,EAAC,IAASA,EAAC,MACpByC,EAAMC,IAAGD,IAAI,MAAO,CACpB,OAAU,CAACzC,EAAC,IAASA,EAAC,KACtB,KAAQ,KAEZuC,EAAOE,GARX,4CAFY,sBACZhB,QAAQC,IAAI,OADA,mCAaZiB,KACD,IAGC,sBAAKC,UAAU,WAAf,UACI,qBAAKC,GAAG,QACR,qBAAKC,QA7Bb,WAOIpC,EAAOE,WANP,SAAWZ,EAAGc,GACG,OAANd,GAAsB,OAANc,IACnBJ,EAAOkB,UAAUC,EAAQ7B,EAAGc,EAAG,IAC/BwB,EAAY,CAACtC,EAAGc,SAyBW8B,UAAU,oBCtBtCG,MAff,WACE,OACI,qBAAKH,UAAU,MAAf,SACE,+BACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,cAAC,IAAD,CAAOgB,KAAK,QAAQC,UAAWjB,cCFpCkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.24473869.chunk.js","sourcesContent":["import publicIp from 'public-ip';\n\nasync function getIp(){\n    return publicIp.v4();\n}\n\nasync function getLocation_by_ip(ip){\n    const url = \"http://api.ipstack.com/\";\n    const token = \"?access_key=00e9145d568b06b0c9caea2cc01c5b66\";\n    let response = await fetch(url + ip + token);\n    let resp = await response.json();\n    return {\n        \"lat\": parseFloat(resp[\"latitude\"]),\n        \"lng\": parseFloat(resp[\"longitude\"])\n    }\n}\n\nasync function ApiSetLocation(){\n    const ip = await getIp();\n    return await getLocation_by_ip(ip);\n}\n\nfunction geoFindMe(hook) {\n    let a = null\n    let b = null\n\n    function success(position) {\n        const lat  = position.coords.latitude;\n        const lng = position.coords.longitude;\n        a = lat\n        b = lng\n        console.log(\"success\", lat, lng);\n        hook(a, b);\n    }\n\n    function error() {\n        alert(\"Errno\");\n        return [null, null]\n    }\n\n    if(!navigator.geolocation) {\n        alert(\"Поддержки нет!\");\n    } else {\n        let r = navigator.geolocation.getCurrentPosition(success, error);\n        console.log(\"r:\", r);\n    }\n    console.log([a, b]);\n    return [a, b]\n}\nfunction viewPoint(dg_map, lat=null, lng=null, zoom=null){\n    if ((lat === null) && (lng === null)){\n\n    } else{\n        dg_map.setView(\n            [lat, lng],\n        );\n    }\n    if (zoom === null){}\n    else {\n        dg_map.setZoom(\n            zoom\n        );\n    }\n}\n\nconst Apiloc = {\n    getIp,\n    getLocation_by_ip,\n    ApiSetLocation,\n    geoFindMe,\n    viewPoint\n}\nexport default Apiloc;\n","import React, {useEffect, useState} from 'react';\nimport {Container, Row, Col} from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport DG from '2gis-maps'\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Apiloc from './Api/location.js';\nimport Share from \"./btns\";\n\n\nfunction Home() {\n    const [popout, setPopout] = useState(<Container size='large' />);\n    const [location, setLocation] = useState(null);\n    const [dg_map, setMap] = useState(null);\n\n    function handlerLocation(){\n        function r(a, b){\n            if (!((a === null) || (b === null))){\n                Apiloc.viewPoint(dg_map, a, b, 18);\n                setLocation([a, b]);\n            }\n        }\n        Apiloc.geoFindMe(r);\n    }\n\n    useEffect(() => {\n        console.log(\"JJJ\");\n        async function get_location(){\n            const a = await Apiloc.ApiSetLocation();\n            setPopout(null);\n            setLocation([a['lat'], a['lng']]);\n            let map = DG.map('map', {\n                'center': [a['lat'], a['lng']],\n                'zoom': 13\n            });\n            setMap(map);\n\n        }\n        get_location();\n    }, [])\n\n    return (\n        <div className=\"main-map\">\n            <div id=\"map\"/>\n            <div onClick={handlerLocation} className=\"my-location\"/>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from \"./panels/main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <main>\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path='/' component={Home}/>\n                    <Route path='/home' component={Home}/>\n                </Switch>\n            </BrowserRouter>\n        </main>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}